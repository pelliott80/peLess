package com.blackpatchpanel.free.peless;
	
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.stage.Stage;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.layout.BorderPane;

/**
 * 
 * @author Paul Elliott <pelliott@blackpatchpanel.com>
 * class that runs the application
 *
 */
public class Main extends Application {
	/*
	 * public class for running javafx app
	 * was auto generated by new/other/javafx/javafx project
	 * and then extensively hacked by me
	 */
	@Override
	public void start(Stage primaryStage) {
		try {
			// this is where the fxml gets in to influence the scene we are creating
			Parent root = FXMLLoader.load(getClass().getResource("/fxml/base.fxml"));
			// create the scene from the root
			Scene scene = new Scene(root);
			// by changing this stylesheet we can change the visual look and feel
			// of our app!
			scene.getStylesheets().add(getClass().getResource("/css/peless.css").toExternalForm());
			// Specify the scene to be used on this stage.
			primaryStage.setScene(scene);
			// add icon for peless
			// note I can not do this with _SCENEBUILDER_ cause it modifies the stage not the scene!
			primaryStage.getIcons().add(new Image(Main.class.getResourceAsStream("/icon/peless.png")));
			
			// show the stage! makes everything run
			// from now on in the event loop!
			primaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Every java app calls a static "main" like this.
	 * the args are the parameters from the command line
	 */
	public static void main(String[] args) {
		/*
		 * Launch a standalone application. This method is typically 
		 * called from the main method(). It must not be called more 
		 * than once or an exception will be thrown. This is equivalent 
		 * to launch(TheClass.class, args) where TheClass is the 
		 * immediately enclosing class of the method that called launch. 
		 * It must be a subclass of Application or a RuntimeException 
		 * will be thrown.
		 * The launch method does not return until the application has 
		 * exited, either via a call to Platform.exit or all of the 
		 * application windows have been closed.
		 */
		// we are stuck in the event loop now!
		launch(args);
	}
}
